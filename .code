/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {ListNode}
 */
var reverseKGroup = function(head, k) {
    if(!head || k === 1) return head;

    let dummy = new ListNode(0);
    dummy.next = head;
    let prevGroupEnd = dummy;

    while(true) {
        let kthNode = prevGroupEnd;

        for(let i=0;i<k && kthNode;i++) {
            kthNode = kthNode.next;
        }

        if(!kthNode) break;
        let groupStart = prevGroupEnd.next;
        let nextGroupStart = kthNode.next;

        let prev = nextGroupStart;
        let curr = groupStart;
        while(curr !== nextGroupStart) {
            let temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }

        prevGroupEnd.next = kthNode;
        prevGroupEnd = groupStart;
    }
    return dummy.next;
};
